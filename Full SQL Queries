SQL is used to perform CRUD operation:
Create
Read
Update
Delete

IBM created SEQUEL: Structured English Query Language

DDL (Data Definition Language): create, alter, rename, truncate & drop
DQL (Data Query Language): select
DML (Data Manipulation Language): insert, update & delete
DCL (Data Control Language): grant & revoke permission to users
TCL (Transaction Control Language): start transaction, commit, rollback

columns -> structure/ schema
row -> individual data

Creating a databse
1. CREATE DATABASE db_name;

2. CREATE DATABASE IF NOT EXISTS db_name;

Deleting a databse
3. DROP DATABASE db_name;

4. DROP DATABASE IF EXISTS db_name;

To use a particular database
5. USE db_name

To create a table
6.  CREATE TABLE table_name (
    column_name1 datatype constraint,
    column_name2 datatype constraint,
    column_name3 datatype constraint
    );

Insert values into table
7.  INSERT INTO table_name
    (colname1, colname2)
    VALUES
    (col1_v1, col2_v1),
    (col1_v2, col2_v2);

7. SHOW DATABASES;

8. SHOW TABLES;

To select and view all columns
9. SELECT * FROM table_name;
---------------------------------------------------------------------------------------------------

For example,
CREATE DATABASE college;

CREATE DATABASE IF NOT EXISTS college;

DROP DATABASE IF EXISTS company;

USE college;

CREATE TABLE student (
id INT PRIMARY KEY,
name VARCHAR (50),
age INT NOT NULL
);

INSERT INTO student VALUES (1, "Swapnita", 22);
INSERT INTO student VALUES (2, "NISHCHAL", 25);

INSERT INTO 
(rollno, name)
VALUES
(101, "Karan"),
(102, "Arjun");

SELECT *FROM student;

SHOW DATABASES;

SHOW TABLES;
------------------------------------------------------------------------------------------------

Q.  Create a database for your company named XYZ.
    Step 1: Create a table inside this DB to store employee info (id, name and salary).
    Step 2: Add following information in the DB:
        1, "adam", 25000
        2. "bob", 30000
        3. "casey", 40000
    Step 3: Select & view all your table data.

CREATE DATABASE xyz_company;
USE xyz_company;

CREATE TABLE employee(
    id INT PRIMARY KEY,
    name VARCHAR(50),
    salary INT
);

INSERT INTO employee
(id, name, salary)
VALUES
(1, "adam", 25000),
(2, "bob", 30000),
(3, "casey", 40000);

SELECT *FROM employee;
---------------------------------------------------------------------------------------------

CONSTRAINTS

SQL contraints are used to specify rules for data in a table.

NOT NULL: columns cannot have a null value
10. col1 INT NOT NULL;

UNIQUE: all values in column are different
11. col2 INT UNIQUE

PRIMARY KEY: makes a column unique & not null but used only for one
12. id INT PRIMARY KEY

13. CREATE TABLE temp (
    id int NOT NULL,
    PRIMARY KEY (id)
    );
-------------------------------------------------------------------------------------------------

Example 1:
CREATE TABLE student(
rollno INT PRIMARY KEY,
name VARCHAR(50)
);

SELECT *FROM student;

CREATE TABLE temp1 (
id INT UNIQUE
);

INSERT INTO temp1 VALUES(101);
INSERT INTO temp1 VALUES(101);

SELECT *FROM temp1;
--------------------------------------------------------

Example 2:
CREATE TABLE temp1 (
id INT,
name VARCHAR(50),
age INT,
city VARCHAR(20),
PRIMARY KEY (id)
);
--------------------------------------------------------

Example 3:
CREATE TABLE temp1 (
id INT,
name VARCHAR(50),
age INT,
city VARCHAR(20),
PRIMARY KEY (id, name)
);
------------------------------------------------------------------------------------------------

CONSTRAINTS continued.....

FOREIGN KEY: prevent actions that would destroy links between tables
14. CREATE TABLE temp (
cust_id INT,
FOREIGN KEY (cust_id) REFERENCES customer(id)
);

DEFAULT: sets the default value of a column
15. salary INT DEFAULT 25000
-------------------------------------------------------------------------------------------------

CREATE TABLE emp (
id INT,
salary INT DEFAULT 25000);

INSERT INTO emp(id) VALUES (101);

SELECT *FROM emp;
------------------------------------------------------------------------------------------------

CONSTRAINTS continued......

CHECK: It can limit the values allowed in a column
16. CREATE TABLE city (
    city VARCHAR(50),
    age INT,
    CONSTRAINT age_check CHECK (age >= 18 AND city = "Delhi")
    );

17. CREATE TABLE newTab (
    age INT CHECK (age >= 18)
    );
---------------------------------------------------------------------------------------------------

CREATE DATABASE college;
USE college;

CREATE TABLE student (
rollno INT PRIMARY KEY,
name VARCHAR(50),
marks INT NOT NULL,
grade VARCHAR(1),
city VARCHAR(20)
);

INSERT INTO student
(rollno, name, marks, grade, city)
VALUES
(101, "Anil", 78, "C", "Pune"),
(102, "Bhumika", 93, "A", "Mumbai"),
(103, "Chetan", 85, "B", "Mumbai"),
(104, "Dhruv", 96, "A", "Delhi"),
(105, "Emanuel", 12, "F", "Delhi"),
(106, "Farah", 82, "B", "Delhi");
------------------------------------------------------------------------------------------------

SELECT: Used to select any data from the database
18. SELECT col1, col2 FROM table_name;
-------------------------------------------------------------------------------------------------

SELECT name, marks FROM student;

SELECT *FROM student;

SELECT city FROM student;

SELECT DISTINCT city FROM student;
--------------------------------------------------------------------------------------------

WHERE clause: To define some conditions
19. SELECT col1, col2 FROM table_name
    WHERE conditions;

Using Operators in WHERE
Arithmetic Operators: +(addition), -(subtraction), *(multiplication), /(division), %(modulus)
Comparison Operators: =(equal to), !=(not equal to), >, >=, <, <=
Logical Operators: AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY
Bitwise Operators: &(Bitwise AND), |(Bitwise OR)

20. SELECT *FROM student WHERE marks = 93;

21. SELECT *FROM student WHERE marks > 80;

22. SELECT *FROM student WHERE city = "Mumbai";

AND (to check for both conditions to be true)
23. SELECT *FROM student
    WHERE marks > 80 AND city = "Mumbai";

OR (to check for one of the conditions to be true)
24. SELECT *FROM student
    WHERE marks > 80 OR city = "Mumbai";

BETWEEN (selects for a range)
25. SELECT *FROM student WHERE marks BETWEEN 80 AND 90;

IN (matches any value in the list)
26. SELECT *FROM student WHERE city IN ("Delhi", "Mumbai");

NOT (to negate the given condition)
27. SELECT *FROM student WHERE city NOT IN ("Delhi", "Mumbai", "Gurgaon");

LIMIT Clause: Sets an upper limit on number of (tuples) rows to be returned
28. SELECT col1, col2 FROM table_name
    LIMIT number;
Example 1: SELECT *FROM student LIMIT 3;
Example 2: SELECT *FROM student 
           WHERE marks > 75
           LIMIT 3;

ORDER By Clause: To sort in ascending (ASC) or descending order (DESC)
29. SELECT col1, col2 FROM table_name
    ORDER BY col_name(s) ASC;

Example 1: SELECT *FROM student
           ORDER BY city ASC;
Example 2: SELECT *FROM student
           ORDER BY marks DESC
           LIMIT 3;

Aggregate Functions: perform a calculation on a set of values, and return a single value.
COUNT()
30. SELECT COUNT(rollno)
    FROM student;

MAX()
31. SELECT MAX(marks)
    FROM student;

32. MIN()

33. SUM()

34. AVG()
SELECT AVG(marks)
FROM student;

Group By Cluase: Groups rows that have the same values into summary rows.
                It collects data from multiple records and groups the result by one or more column.

Generally we use group by with some aggregate function.

To count the number of students in each city
35. SELECT city, COUNT(name)
    FROM student
    GROUP BY city;

Example 1: SELECT city, AVG(marks)
           FROM student
           GROUP BY city
           ORDER BY city;

Example 2: SELECT city, AVG(marks)
           FROM student
           GROUP BY city
           ORDER BY avg(marks) DESC;

HAVING CLAUSE: Similar to WHERE i.e. applies some condition on rows.
                Used when we want to apply any condition after grouping.

Count number of students in each city where max marks cross 90.
36. SELECT COUNT(name), city
    FROM student
    GROUP BY city
    HAVING MAX(marks) > 90;
---------------------------------------------------------------------------------------------

ASC for ascending order
DESC for descending order

General Order: SELECT column(s)
               FROM table_name
               WHERE condition
               GROUP BY column(s)
               HAVING condition
               ORDER BY column(s) ASC;

Example 1: SELECT city, COUNT(rollno)
           FROM student
           GROUP BY city
           HAVING MAX(marks) > 90;

Example 2: SELECT city
           FROM student
           WHERE grade = "A"
           GROUP BY city
           HAVING MAX(marks) > 90
           ORDER BY ASC;

UPDATE: to update existing rows
37. UPDATE table_name
SET col1 = val1, col2 = val2
WHERE condition;

UPDATE student
SET grade = "B"
WHERE marks > 80;

38. SET SQL_SAFE_UPDATES = 0;

DELETE: to delete existing rows
39. DELETE FROM table_name
    WHERE condition;

DELETE FROM student
WHERE marks < 33;


FOREIGN KEY

CREATE TABLE dept (
id INT PRIMARY KEY,
name VARCHAR (50)
);

CREATE TABLE teacher (
id INT PRIMARY KEY,
name VARCHAR (50),
dept_id INT,
FOREIGN KEY (dept_id) REFERENCES dept(id)
);

Cascading for FK
On Delete Cascade: When we create a foreign key using this option, it deletes the referencing rows in the child table when the 
                   referenced row is deleted in the parent table which has a primary key.
On Update Cascade: When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when
                    the referenced row is updated in the parent table which has a primary key.
 ------------------------------------------------------------------------------------------

40. CREATE TABLE student (
    id INT PRIMARY KEY,
    courseID INT,
    FOREIGN KEY(courseID) REFERENCES course(id)
    ON DELETE CASCADE
    ON UPDATE CACADE
    );

INSERT INTO teacher
VALUES
(101, "Adam", 101),
(102, "Eve", 102);

DROP TABLE teacher;

UPDATE dept
SET id = 103
WHERE id = 102;
---------------------------------------------------------------------------------------------

ALTER: to change the schema

ADD Column
41. ALTER TABLE table_name
    ADD COLUMN column_name datatype constraint;

Example: ALTER TABLE student
         ADD COLUMN age INT NOT NULL DEFAULT 19;

DROP Column
42. ALTER TABLE table_name
    DROP COLUMN column_name;

Example 1: ALTER TABLE student
           DROP COLUMN stu_age;

Example 2: ALTER TABLE student
           ADD COLUMN age INT;

Example 3: ALTER TABLE student
           DROP COLUMN age;

RENAME Table
43. ALTER TABLE table_name
    RENAME TO new_table_name;

Example: ALTER TABLE student
         MODIFY age VARCHAR(2);

CHANGE Column (rename)
44. ALTER TABLE table_name
    CHANGE COLUMN old_name new_name new_datatype new_constraint;

Example: ALTER TABLE student
         CHANGE age stu_age INT;

MODIFY Column (modify datatype/ constraint)
45. ALTER TABLE table_name
    MODIFY col_name new_datatype new_constraint;

Example: ALTER TABLE student
         MODIFY age VARCHAR(2);
-----------------------------------------------------------------------------------------

ALTER TABLE student
MODIFY COLUMN age VARCHAR(2);

INSERT INTO student
(rollno, name, marks, age)
VALUES
(107, "gargi", 68, 100);
--------------------------------------------------------------------------------------------

Truncate: to delete table's data
46. TRUNCATE TABLE table_name;

UPDATE student
SET grade = "0"
WHERE grade = "A";
--------------------------------------------------------------------------------------------

Q. In the student table:
a. Change the name of column "name" to "full_name".
b. Delete all the students who scored marks less than 80.
c. Delete the column for grades

ALTER TABLE student
CHANGE name full_name VARCHAR(50);

DELETE FROM student
WHERE marks < 80;

ALTER TABLE student
DROP column grade;
-----------------------------------------------------------------------------------------

Joins in SQL
Joins is used to combine rows from two or more tables, based on a related column between them.

Types of Joins

Inner Join: Returns records that have matching values in both tables
47. SELECT column(s)
    FROM tableA
    INNER JOIN tableB
    ON tableA.col_name = tableB.col_name;

Example: SELECT *FROM student
         INNER JOIN course
         ON student.student_id = course.student_id;


Outer Join:

Left Join: Returns all records from the left table, and the matched records from the right table.
48. SELECT column(s)
    FROM tableA
    LEFT JOIN tableB
    ON tableA.col_name = tableB.col_name;

Right Join: Returns all records from the right table, and the matched records from the left table
49. SELECT column(s)
    FROM tableA
    RIGHT JOIN tableB
    ON tableA.col_name = tableB.col_name;

Example: SELECT *FROM student as s
         RIGHT JOIN course as c
         ON s.student_id = c.student_id;

Full Join: Returns all records when there is a match in either left or right table.

LEFT JOIN
UNION
RIGHT JOIN

50. SELECT *FROM student as a
    LEFT JOIN course as b
    ON a.id = b.id
    UNION
    SELECT *FROM student as a
    RIGHT JOIN course as b
    ON a.id = b.id;

Example: SELECT *FROM student as a
         LEFT JOIN course as b
         ON a.id = b.id
         WHERE b.id IS NULL;

Self Join: It is a regular join but the table is joined with itself.
51. SELECT column(s)
    FROM table as a
    JOIN table as b
    ON a.col_name = b.col_name;

Example: SELECT a.name as manager_name, b.name
         FROM employee as a
         JOIN employee as b
         ON a.id = b.manager_id;

Union: It is used to combine the result-set of two or more SELECT statements.
       Gives UNIQUE records

To use it:
every SELECT 
---------------------------------------------------------------------------------------

CREATE TABLE student (
id INT PRIMARY KEY,
name VARCHAR(50)
);

INSERT INTO student (id, name)
VALUES
(101, "adam"),
(102, "bob"),
(103, "casey");

CREATE TABLE course (
id INT PRIMARY KEY,
course VARCHAR(50)
);

INSERT INTO course (id, course)
VALUES
(102, "English"),
(105, "Math"),
(103, "Science"),
(107, "Computer Science");

SELECT *FROM student;
SELECT *FROM course;

SELECT *FROM student
INNER JOIN course
ON student.id = course.id;

SELECT *FROM student as s
INNER JOIN course as c
ON s.id = c.id;
---------------------------------------------------------------------------------------------

CREATE TABLE employee (
id INT PRIMARY KEY,
name VARCHAR(50),
manager_id INT
);

INSERT INTO employee (id, name, manager_id)
VALUES
(101, "adam", 103),
(102, "bob", 104),
(103, "casey", NULL),
(104, "donald", 103);

SELECT *FROM employee;

SELECT *FROM student as a
RIGHT JOIN course as b
ON a.id = b.id
WHERE a.id IS NULL;

SELECT *
FROM employee as a
JOIN employee as b
ON a.id = b.manager_id;

SELECT a.name as manager_name, b.name
FROM employee as a
JOIN employee as b
ON a.id = b.manager_id;
----------------------------------------------------------------------------------------------
